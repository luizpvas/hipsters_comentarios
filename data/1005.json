{"title":"Evolução e Especificação do JavaScript Moderno – Hipsters #58","releaseDate":"22/08/2017","tags":["front-end","Podcast"],"people":["Paulo Silveira","Sergio Lopes","Leo Balter"],"disqusUrl":"https://disqus.com/embed/comments/?base=default&f=hipsterspontotech&t_i=1005%20http%3A%2F%2Fhipsters.tech%2F%3Fp%3D1005&t_u=https%3A%2F%2Fhipsters.tech%2Fevolucao-e-especificacao-do-javascript-moderno%2F&t_e=Evolu%C3%A7%C3%A3o%20e%20Especifica%C3%A7%C3%A3o%20do%20JavaScript%20Moderno%20%E2%80%93%20Hipsters%20%2358&t_d=Evolu%C3%A7%C3%A3o%20e%20Especifica%C3%A7%C3%A3o%20do%20JavaScript%20Moderno%20-%20Hipsters%20%2358%20-%20Hipsters%20Ponto%20TechHipsters%20Ponto%20Tech&t_t=Evolu%C3%A7%C3%A3o%20e%20Especifica%C3%A7%C3%A3o%20do%20JavaScript%20Moderno%20%E2%80%93%20Hipsters%20%2358&s_o=default#version=600a9bd88a8393b10140eb70dcc30fd1","comments":[{"author":"Manoel Vilela","comment":"Interessante. Com essas novas especificações aí parece até uma linguagem de programação de verdade. Fico pensando se é esperança sobre o futuro da web ou ilusão... espero que as coisas continuem melhorando."},{"author":"Lucas Lopes","comment":"array[-1] para acessar o último elemento do array"},{"author":"Lucas Oliveira","comment":"TOPPER!"},{"author":"Jaumzera","comment":"abstenção* kkkkkkMuito bom como sempre."},{"author":"Augusto Santos","comment":"Excelente podcast. Fico feliz em saber que os responsáveis pela especificação da linguagem estão realmente focados em tornar a linguagem ainda mais eficiente, não incluindo recursos \"da moda\" sem um profundo estudo antes."},{"author":"Fernando Boaglio","comment":"Que absurdo, o nível desse podcast caiu muito, a extensão do Warcraft não é Frozen Helmet , é Frozen Throne kkk  frozen-throne.js kkk"},{"author":"Leo Balter","comment":"Eu tinha falado de Frozen Realms. E tem Realms no Warcraft certo?De qualquer forma, Warcraft é a única coisa que me vem à mente quando falam de Frozen Realms."},{"author":"Giordano Amaral Do Nascimento","comment":"uhauhahuahuahu fdm.. kkkkk"},{"author":"Bruno Costa","comment":"Nossaaaaa vão mudar o Date do JS. Esse tem jeito ainda kkkkkk. Ótimo Podcast. Queria sugerir um tema sobre gos mais voltado para comparação gráfica seria muito legal."},{"author":"Leo Balter","comment":"na verdade o Date continua o mesmo, mas vai ser feita uma outra API nativa com a situação resolvida. Assim não quebra o código de ninguém."},{"author":"Bruno Costa","comment":"Ahhh, ótimo de qualquer forma."},{"author":"Robson Peixoto","comment":"Show de bola!!! Que tal falar sobre Kotlin, se possível fora do mundo Android? =D"},{"author":"Gabriel Prates","comment":"Aí Paulo Silveira, já fizeram um episódio sobre criptografia?"},{"author":"Marcos","comment":"Seria bacana ter um modo em que a tipagem dos dados seja obrigatória, se não me falha a memória o PHP implementou este recurso recentemente na versão 7."},{"author":"Vinícius Dias","comment":"Opa, Marcos.PHP tem o strict types, mas isso não força o desenvolvedor a usara tipagem. Só desabilita o casting. Por exemplo:function funcao(int $numero) {}Isso funciona dessa forma: funcao('1') sem strict types, mas com strict types habilitado, não funciona."},{"author":"Leo Balter","comment":"a gente quer se livrar de modos no JS. \"use strict\" já foi muito, e nem o \"use module\" conseguiu entrar."},{"author":"Marcel dos Santos","comment":"Mais um excelente episódio do Hipsters.tech!É de dar orgulho de ver brasileiros envolvidos em projetos importantes relacionados a evolução de linguagens como o JavaScript. Além disso, o Leo Balter é uma excelente pessoa e sempre aberto para uma conversa, seja pessoalmente ou pelo Twitter. Tive a oportunidade de conversar com ele em diversas ocasiões. ;)Uma das funcionalidades (que não é tão maluca assim) que espero poder ver no JavaScript é o pipeline operator que já existe em linguagens como Elixir, Elm e Hack. Além de ser elegante e deixar o nosso código mais expressivo, é um caminho para tornar o JavaScript com uma pegada mais funcional.Agora, para botar lenha na fogueira e polemizar um pouco, será que existe alguma proposta ou intenção por parte do TC39 na implementação de um sistema de tipos mais robusto em JavaScript com anotações de tipos, por exemplo? ;PPipeline Operator Proposal - https://github.com/tc39/pro...Pipeline Operator - \n\n\nReproduzir\n\n\n Ocultar\n\n\n\n\n"},{"author":"Roberto Oliveira","comment":"Pipeline operator <3Ja uso muito esquema de composição usando a função de pipeline do ramda. Seria fantástico ter essa notação na linguagem."},{"author":"Leo Balter","comment":"eu acho difícil - beirando o impossível - rolar sintaxe de tipagem no JS (tipos já existem). Acho que o TypeScript seria a melhor saída para quem procura alguma alternativa, já que ele anda bem colado no desenvolvimento do ES."},{"author":"Welton Vaz de Souza","comment":"Hoje, teve Hipsters sobre Javascript sem a participação do Professor @flaviohalmeida quero deixar meu veemente protesto ao Paulo Silveira!  \n\n\nVisualizar\n\n\n Ocultar\n\n\n\n\n"},{"author":"Guilherme Leoni","comment":"Fiquei chateado quando percebi que ele não estaria... Tá loco! Só o Flávio pra compartilhar dos nossos problemas com teclados malditos..."},{"author":"Welton Vaz de Souza","comment":"Infelizmente, como explicou o Paulo Silveira não foi possível! O professor Flávio Almeida foi a unica pessoal no universo que consegui ensinar-me essa mald..., quer dizer linguagem, é achar divertido. Apesar que agora eu usar mais ELM, com Javascript já consegui fazer um joguinho para meu filhote."},{"author":"Leo Balter","comment":"seria ótimo! Quem sabe nao me chamam novamente para um outro episódio onde eu possa bater um papo com o Flavio? Eu adoraria. #pidao."},{"author":"Paulo Silveira","comment":"ele foi convocado!!! nao bateu horario :("},{"author":"Welton Vaz de Souza","comment":"Então esta perdoado, como o Professor deu causa para a falha!"},{"author":"Raphael Lacerda","comment":"Conclusão do podcastJavascript === java, returns falseJavascript == Java, returns true"},{"author":"Leo Balter","comment":"NaN"},{"author":"Tiago Nobrega","comment":"Sugiro uma solução para o problema: 0.1+0.2===0.3 (return false). Isso é insano. A escolha de uma implementação melhor para number daria muito mais segurança para operações matemáticas decimais. Não gostaria de quebrar a web com isso, mas por favor não criem uma classe especificamente para isso. Nenhuma linguagem deveria ter mais de um tipo de número hoje em dia."},{"author":"Leo Balter","comment":"O mais próximo disso é o BigInt para números inteiros. https://tc39.github.io/prop...As operações são feitas por bit e não por matemática exata. A soma para 0.1 + 0.2 no JS é precisa em relação ao posicionamento de bits no cálculo. Esse - e algumas outras operações - deixam uma sujeira. Pode parecer ridículo, mas essa operação permite uma série de coisas interessantes como melhor performance e até manipulação pesada de memória (ex: gráficos).É um cobertor curto, pro lado que puxar vai ter vantagens e desvantagens. Como já mostraram, não é diferente em outras linguagens.Essa operação segue um padrão especificado pelo IEEE."},{"author":"Paulo Silveira","comment":"meu site preferido é esse:http://0.30000000000000004.com"},{"author":"Marcel dos Santos","comment":"Isso não é um problema do JavaScript em si. Isso é problema de como números de ponto flutuantes são calculados em arquitetura 32 bits. Isso acontece em diversas linguagens. A solução para este problema é utilizar estruturas que suportam o cálculo de números de alta precisão. Existem bibliotecas para isso em quase todas as linguagens. ;) Para a utilização em cálculos com moedas, recomenda-se a utilização do Money Pattern.Mais informações em:- Ponto Flutuante: https://www.wikiwand.com/pt...- Money Pattern: https://martinfowler.com/ea..."},{"author":"Paulo Nasciemento","comment":"Sugiro adotar o nome de JavaScript Hipster para as proximas versões. Estará sempre por dentro das novidades."},{"author":"Leo Balter","comment":"não seria tão hipster quanto hipsters tech :)"},{"author":"Paulo Silveira","comment":"e fica a homenagem ao podcast"},{"author":"Luiz Costa","comment":"Bom dia hipsters, para mim uma ideia boa seria a geracao automatica de arquivos de testes, baseado no arquivo js."},{"author":"Leo Balter","comment":"aí seria tipo versionar o arquivo e qualquer alteração passa por diff e um humano revisa.Eu prefiro testes escritos com intenção. Testar só porque funciona daquele jeito pode deixar passar direto pequenos problemas que podem virar bola de neve na frente. Testes precisam falhar por um bom motivo, e inclusive permitir refatorações completas.Um exemplo de testes gerados que me dá arrepios são os snapshots do React/Jest. Aquilo só testa o diff do código."},{"author":"Leonardo Gregianin","comment":"Parabéns pelo episódio. O título da capa não passou pelo teste unitário... Arruma por favor a \"Especificação\"."},{"author":"Leo Balter","comment":"ReferenceError"},{"author":"Rafael","comment":"Na verdade isso e um easter egg."},{"author":"Paulo Silveira","comment":"bem observado :P"},{"author":"Lucas Palma Stabile","comment":"Link pro filme Ronin é o mesmo link pro perfil do Leo Balter no Twitter tmb"},{"author":"Paulo Silveira","comment":"ambos arrumados!"}]}